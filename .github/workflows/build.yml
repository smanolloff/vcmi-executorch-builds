name: VCMI executorch builds

on:
  push:
    branches:
      - tmp-builds
  workflow_dispatch:
    inputs:
      executorch_ref:
        description: "executorch ref (commit SHA or tag)"
        required: true
        default: &default_ref "v0.7.0"
      buck2_version:
        description: "buck2 release version for win-arm64 build"
        required: true
        default: &default_buck2 "2025-05-06"

jobs:
  build:
    env:
      DEFAULT_REF: *default_ref
      DEFAULT_BUCK2: *default_buck2
    strategy:
      fail-fast: false
      matrix:
        # https://docs.github.com/en/actions/reference/runners/github-hosted-runners#standard-github-hosted-runners-for-public-repositories
        # https://github.com/actions/runner-images/tree/main
        include:
          - builder: windows-11-arm
            target: win-arm64

          - builder: windows-2025
            target: win-x64

          - builder: windows-2025
            target: win-x86

          - builder: ubuntu-latest
            target: linux-x64

          # Prebuilt PyTorch wheels are no longer available for Intel-based macOS
          # - builder: macos-15-intel
          #   target: macos-x64

          - builder: macos-15
            target: macos-arm64

          - builder: macos-15
            target: ios-arm64

          - builder: ubuntu-latest
            target: android-arm64

          - builder: ubuntu-latest
            target: android-armv7

          - builder: ubuntu-latest
            target: android-x64


    runs-on: ${{ matrix.builder }}
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout (this)
      uses: actions/checkout@v5

    #
    # Setup section
    #

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.12

    - name: Git config
      if: startsWith(matrix.target, 'win-')
      run: |
        git config --global core.longpaths true
        git config --global core.autocrlf true

    - name: Set EXECUTORCH_REF and BUCK2_VERSION
      run: |
        set -x
        echo "EXECUTORCH_REF=${{ inputs.pytorch_ref || env.DEFAULT_REF }}" >> $GITHUB_ENV
        echo "BUCK2_VERSION=${{ inputs.buck2_version || env.DEFAULT_BUCK2 }}" >> $GITHUB_ENV

    # Tell cargo explicitly which linker to use for aarch64-pc-windows-msvc
    - name: Set up cargo linker (win-arm64)
      if: matrix.target == 'win-arm64'
      run: |
        link="$VCToolsInstallDir/bin/HostARM64/arm64/link.exe"
        echo "CARGO_TARGET_AARCH64_PC_WINDOWS_MSVC_LINKER=$link" >> "$GITHUB_ENV"

    - name: Set up Rust toolchain (win-arm64)
      uses: dtolnay/rust-toolchain@stable
      if: matrix.target == 'win-arm64'
      with:
        toolchain: nightly-2025-02-16
        targets: aarch64-pc-windows-msvc

    - name: Set up buck2 (win-arm64)
      if: matrix.target == 'win-arm64'
      run: |
        set -x
        tag_url="https://github.com/facebook/buck2/releases/download/$BUCK2_VERSION/buck2-x86_64-pc-windows-msvc.exe.zst"
        zst="$RUNNER_TEMP/buck2.exe.zst"
        exe="$RUNNER_TEMP/buck2.exe"
        curl -LfS -o "$zst" "$tag_url"
        7z x -so "$zst" > "$exe"
        echo "$RUNNER_TEMP" >> "$GITHUB_PATH"
        export PATH="$PATH:$RUNNER_TEMP"
        buck2 --version
        "$exe" --version || buck2 --version

    - name: Set up NDK r25c
      if: startsWith(matrix.target, 'android-')
      run: |
        wget https://dl.google.com/android/repository/android-ndk-r25c-linux.zip
        unzip android-ndk-r25c-linux.zip -d $HOME
        echo "ANDROID_NDK_HOME=$HOME/android-ndk-r25c" >> $GITHUB_ENV
        echo "$HOME/android-ndk-r25c" >> $GITHUB_PATH

    #
    # Checkout executorch section
    #

    - name: Restore executorch_src cache
      id: cache_executorch_src
      uses: actions/cache@v4
      with:
        path: executorch
        key: cache_executorch_src-${{ env.EXECUTORCH_REF }}-${{ startsWith(matrix.target, 'win-') && 'windows' || 'default' }}

    - name: Checkout executorch
      if: steps.cache_executorch_src.outputs.cache-hit != 'true'
      uses: actions/checkout@v5
      with:
        submodules: recursive
        repository: pytorch/executorch
        ref: "${{ env.EXECUTORCH_REF }}"
        path: executorch

    - name: Save executorch_src cache
      if: steps.cache_executorch_src.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: executorch
        key: cache_executorch_src-${{ env.EXECUTORCH_REF }}-${{ startsWith(matrix.target, 'win-') && 'windows' || 'default' }}

    - name: Set EXECUTORCH_SHA
      run: |
        set -x
        cd executorch
        sha=$(git rev-parse --short=8 HEAD)
        echo "EXECUTORCH_SHA=$sha" >> $GITHUB_ENV

    #
    # Build section
    #

    - name: Prepare
      run: |
        set -x
        source prepare.sh ${{ matrix.target }}

    - name: Build
      id: build
      run: |
        set -x
        export ARTIFACT_ROOT="${{github.workspace}}/artifact-root"
        mkdir -p "$ARTIFACT_ROOT"

        bash -x build.sh ${{ matrix.target }}

        echo "artifact_root=$ARTIFACT_ROOT" >> $GITHUB_OUTPUT
        echo "artifact_name=vcmi-executorch-${{matrix.target}}-$EXECUTORCH_REF-$EXECUTORCH_SHA" >> $GITHUB_OUTPUT

    #
    # Artifact section
    #

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: "${{steps.build.outputs.artifact_name}}"
        path: "${{steps.build.outputs.artifact_root}}"
        compression-level: 9
        if-no-files-found: error
